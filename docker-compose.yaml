services:
  stock-publisher:
    image: manuelbrunner/stock-publisher:v1.0
    container_name: stock-publisher
    restart: always
    environment:
      RABBITMQ_URL: "${RABBITMQ_URL}"
      TICKER_INTERVAL: "${TICKER_INTERVAL}"
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - PvsNetwork

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 0s
    networks:
      - PvsNetwork

  stock-consumer-tesla:
    image: manuelbrunner/stock-consumer:v1.0
    container_name: stock-consumer-TSLA
    restart: always
    environment:
      RABBITMQ_URL: "${RABBITMQ_URL}"
      MONGODB_URL: "${MONGODB_URL}"
      MONGODB_DB: "${MONGODB_DB}"
      MONGODB_COLLECTION: "${MONGODB_COLLECTION}"
      QUEUE_NAME: "TSLA"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_started
      mongo3:
        condition: service_started
    networks:
      - PvsNetwork

  stock-consumer-apple:
    image: manuelbrunner/stock-consumer:v1.0
    container_name: stock-consumer-AAPL
    restart: always
    environment:
      RABBITMQ_URL: "${RABBITMQ_URL}"
      MONGODB_URL: "${MONGODB_URL}"
      MONGODB_DB: "${MONGODB_DB}"
      MONGODB_COLLECTION: "${MONGODB_COLLECTION}"
      QUEUE_NAME: "AAPL"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_started
      mongo3:
        condition: service_started
    networks:
      - PvsNetwork

  stock-consumer-microsoft:
    image: manuelbrunner/stock-consumer:v1.0
    container_name: stock-consumer-MSFT
    restart: always
    environment:
      RABBITMQ_URL: "${RABBITMQ_URL}"
      MONGODB_URL: "${MONGODB_URL}"
      MONGODB_DB: "${MONGODB_DB}"
      MONGODB_COLLECTION: "${MONGODB_COLLECTION}"
      QUEUE_NAME: "MSFT"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_started
      mongo3:
        condition: service_started
    networks:
      - PvsNetwork

  mongo1:
    image: mongo:7.0
    container_name: mongo1
    restart: always
    ports:
      - 27017:27017
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "./mongo1_data:/data/db"
      - "./mongo1_config:/data/configdb"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
    networks:
      - PvsNetwork

  mongo2:
    image: mongo:7.0
    container_name: mongo2
    restart: always
    ports:
      - 27018:27018
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27018" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "./mongo2_data:/data/db"
      - "./mongo2_config:/data/configdb"
    networks:
      - PvsNetwork

  mongo3:
    image: mongo:7.0
    container_name: mongo3
    restart: always
    ports:
      - 27019:27019
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27019" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "./mongo3_data:/data/db"
      - "./mongo3_config:/data/configdb"
    networks:
      - PvsNetwork

  stock-liveview1:
    image: manuelbrunner/stock-liveview:v1.0
    container_name: stock-liveview1
    ports:
      - "3000:3000"
    environment:
      MONGODB_URL: "${MONGODB_URL}"
      MONGODB_DB: "${MONGODB_DB}"
      MONGODB_COLLECTION: "${MONGODB_COLLECTION}"
    networks:
      - PvsNetwork

  stock-liveview2:
    image: manuelbrunner/stock-liveview:v1.0
    container_name: stock-liveview2
    ports:
      - "3001:3000"
    environment:
      MONGODB_URL: "${MONGODB_URL}"
      MONGODB_DB: "${MONGODB_DB}"
      MONGODB_COLLECTION: "${MONGODB_COLLECTION}"
    networks:
      - PvsNetwork

  nginx-load-balancer:
    image: nginx:1.27.1
    container_name: nginx-load-balancer
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./lb/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - stock-liveview1
      - stock-liveview2
    networks:
      - PvsNetwork

networks:
  PvsNetwork:
    driver: bridge
